# -*- coding: utf-8 -*-
"""ForestLogic_GrowthDominance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1knVmF-EdgP1O50zIrmQ7uGFWgoFZti1f
"""

from google.colab import files
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.transforms import Affine2D
import mpl_toolkits.axisartist.floating_axes as floating_axes
from datetime import datetime
import json

#files. upload()

path1 = 'Parcel 6 Plot 4_Clean_sm'
tree_df = pd.read_excel('/content/Parcel 6 Plot 4_Clean_sm.xlsx')

def delete_poor(Trees):
  return Trees[(Trees['Condition']!='poor')]

def compute_Diameter(Trees, start_year, end_year):
  Trees[f'Diameter{end_year}'] = round((Trees[f'Diameter{start_year}']*Trees['GrowthFactor']+(end_year-start_year))/Trees['GrowthFactor'], 2)
  return Trees

def compute_Basal(Trees, year):  
  Trees[f'Basal{year}'] = [0.005454*(d**2) for d in list(Trees[f'Diameter{year}'])]
  return Trees

def compute_BasalGrowth(Trees, start_year, end_year):
  #if not Trees[f'Thinned{end_year}']:
  Trees[f'BasalGrowth{start_year}2{end_year}'] = Trees[f'Basal{end_year}']-Trees[f'Basal{start_year}']*(1-Trees[f'Thinned{end_year}'])
  #else:
  #  Trees[f'BasalGrowth{start_year}2{end_year}'] = Trees[f'Basal{end_year}']
  # Convert negative Basal Growth to zero.
  #neg_trees_list = Trees[(Trees[f'BasalGrowth{start_year}2{end_year}']<0)].index.to_list()
  #Trees.loc[neg_trees_list, f'BasalGrowth{start_year}2{end_year}']= Trees.loc[neg_trees_list][f'Basal{end_year}']
  return Trees

def get_G(Trees, start_year, end_year):
  Trees.sort_values(f'Basal{end_year}', inplace=True, ignore_index=True)
  Trees[f'CumSize{end_year}'] = Trees[f'Basal{end_year}'].cumsum()
  Trees[f'CumGrowth{start_year}2{end_year}'] = Trees[f'BasalGrowth{start_year}2{end_year}'].cumsum()
  Trees[f'CumSize%{end_year}'] = Trees[f'CumSize{end_year}']/Trees[f'Basal{end_year}'].sum()
  Trees[f'CumGrowth%{start_year}2{end_year}'] = Trees[f'CumGrowth{start_year}2{end_year}']/Trees[f'BasalGrowth{start_year}2{end_year}'].sum()
  Trees[f'SizeDifference{end_year}'] = Trees[f'CumSize%{end_year}'].diff()
  Trees.loc[0, [f'SizeDifference{end_year}']] = np.nan
  GrowthSum = [np.nan]
  for i in range(1,Trees.index.to_list()[-1]+1):
    s = Trees[f'CumGrowth%{start_year}2{end_year}'][i] + Trees[f'CumGrowth%{start_year}2{end_year}'][i-1]
    GrowthSum.append(s)
  Trees[f'GrowthSum{start_year}2{end_year}'] = GrowthSum
  GrowthDominance = 1 - (Trees[f'SizeDifference{end_year}']*Trees[f'GrowthSum{start_year}2{end_year}']).sum()
  return {
      'Trees': Trees,
      f'GrowthDominance{start_year}2{end_year}': GrowthDominance
  }

def plot_Trees(Trees, start_year, end_year):
  plt.plot(Trees[f'CumSize%{end_year}'], Trees[f'CumGrowth%{start_year}2{end_year}'], '-ok')
  plt.show()

def tall_thinning(Trees, year, rate=0.2):
  Trees.sort_values(f'Diameter{year}', inplace=True, ignore_index=True, ascending=False)
  num_thin = int(round((Trees.index.to_list()[-1]+1)*rate, 0))
  if rate == 1:
    for i in range(len(Trees)):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  else:
    for i in range(num_thin):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  return Trees

def low_thinning(Trees, year, rate=0.2):
  Trees.sort_values(f'Diameter{year}', inplace=True, ignore_index=True)
  num_thin = int(round((Trees.index.to_list()[-1]+1)*rate, 0))
  if rate == 1:
    for i in range(len(Trees)):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  else:
    for i in range(num_thin):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  return Trees

def even_thinning(Trees, year, rate=0.2):
  Trees.sort_values(f'Diameter{year}', inplace=True, ignore_index=True)
  num_thin = int(round((Trees.index.to_list()[-1]+1)*rate, 0))
  num_thin_tall = int(round(num_thin/2, 0))
  num_thin_low = num_thin - num_thin_tall
  if rate == 1:
    for i in range(len(Trees)):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  else:
    for i in range(num_thin_low):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
    for i in range(len(Trees)-num_thin_tall, len(Trees)):
      Trees.loc[i, [f'Diameter{year}']] = round(1/Trees.loc[i, 'GrowthFactor'], 2)
      Trees.loc[i, [f'Thinned{year}']] = 1
  return Trees

#even_thinning(tree_df, 2021, rate=0.2)

def thinning(Trees, year, Dominance, rate=0.2, threshold=0.2):
  if Dominance > threshold:
    return low_thinning(Trees, year, rate)
  elif Dominance < -threshold:
    return tall_thinning(Trees, year, rate)
  else:
    return Trees

def one_management(Trees, start_year, end_year, prev_Dominance, rate=0.2, thin=True, even_thin=False, threshold=0.2, del_poor=True, plot_process=False, print_Dom=False):
  if del_poor:
    Trees = delete_poor(Trees)
  else:
    pass
  Trees = compute_Diameter(Trees, start_year, end_year)
  Trees[f'Thinned{end_year}'] = 0
  if thin:
    if even_thin:
      Trees = even_thinning(Trees, end_year, rate)
    else:
      Trees = thinning(Trees, end_year, prev_Dominance, rate, threshold)
  else:
    pass
  Trees = compute_Basal(Trees, start_year)
  Trees = compute_Basal(Trees, end_year)
  Trees = compute_BasalGrowth(Trees, start_year, end_year)
  Trees = get_G(Trees, start_year, end_year)['Trees']
  Dominance = get_G(Trees, start_year, end_year)[f'GrowthDominance{start_year}2{end_year}']
  if print_Dom:
    print(f'Growth Dominance Coefficient from {start_year} to {end_year} is {Dominance}.')
  if plot_process:
    plot_Trees(Trees, start_year, end_year)
  return {
      'Trees': Trees,
      'prev_Dominance': Dominance
  }

def managements_highD(Trees, start_year, interval=5, observation=5, rate=0.2, thin=True, threshold=0.2, del_poor=True, plot_process=False, print_Dom=False):
  prev_Dominance = 0
  Trees_dict = one_management(Trees, start_year, start_year+interval, prev_Dominance, rate, False, False, threshold, del_poor, plot_process, print_Dom)
  Trees = Trees_dict['Trees']
  Dominance = Trees_dict['prev_Dominance']
  DOM = [Dominance]
  for i in range(1, observation):
    Trees_dict = one_management(Trees, start_year+i*interval, start_year+(i+1)*interval, prev_Dominance, rate, thin, False, threshold, del_poor, plot_process, print_Dom)
    Trees = Trees_dict['Trees']
    prev_Dominance = Trees_dict['prev_Dominance']
    DOM.append(prev_Dominance)
  return {
      'Trees': Trees,
      'Dom': DOM
  }

def managements_tall(Trees, start_year, interval=5, observation=5, rate=0.2, threshold= 0.2, del_poor=True, plot_process=False, print_Dom=False):
  prev_Dominance = 0
  Trees_dict = one_management(Trees, start_year, start_year+interval, prev_Dominance, rate, False, False, threshold, del_poor, plot_process, print_Dom)
  Trees = Trees_dict['Trees']
  Dominance = Trees_dict['prev_Dominance']
  DOM = [Dominance]
  for i in range(1, observation):
    Trees_dict = one_management(Trees, start_year+i*interval, start_year+(i+1)*interval, -10000, rate, True, False, threshold, del_poor, plot_process, print_Dom)
    Trees = Trees_dict['Trees']
    Dominance = Trees_dict['prev_Dominance']
    DOM.append(Dominance)
  return {
      'Trees': Trees,
      'Dom': DOM
  }

def managements_low(Trees, start_year, interval=5, observation=5, rate=0.2, threshold= 0.2, del_poor=True, plot_process=False, print_Dom=False):
  prev_Dominance = 0
  Trees_dict = one_management(Trees, start_year, start_year+interval, prev_Dominance, rate, False, False, threshold, del_poor, plot_process, print_Dom)
  Trees = Trees_dict['Trees']
  Dominance = Trees_dict['prev_Dominance']
  DOM = [Dominance]
  for i in range(1, observation):
    Trees_dict = one_management(Trees, start_year+i*interval, start_year+(i+1)*interval, 10000, rate, True, False, threshold, del_poor, plot_process, print_Dom)
    Trees = Trees_dict['Trees']
    Dominance = Trees_dict['prev_Dominance']
    DOM.append(Dominance)
  return {
      'Trees': Trees,
      'Dom': DOM
  }

def managements_even(Trees, start_year, interval=5, observation=5, rate=0.2, threshold= 0.2, del_poor=True, plot_process=False, print_Dom=False, even_thin=True):
  prev_Dominance = 0
  Trees_dict = one_management(Trees, start_year, start_year+interval, prev_Dominance, rate, False, False, threshold, del_poor, plot_process, print_Dom)
  Trees = Trees_dict['Trees']
  Dominance = Trees_dict['prev_Dominance']
  DOM = [Dominance]
  for i in range(1, observation):
    Trees_dict = one_management(Trees, start_year+i*interval, start_year+(i+1)*interval, 10000, rate, True, True, threshold, del_poor, plot_process, print_Dom)
    Trees = Trees_dict['Trees']
    Dominance = Trees_dict['prev_Dominance']
    DOM.append(Dominance)
  return {
      'Trees': Trees,
      'Dom': DOM
  }

def convert_fmt(path):
  return pd.read_excel(f'/content/{path}.xlsx')

def compute_Dominance_single(path, rate=0.2, observation=20, null_thin=True, threshold_list=[0.2, 0.1, 0.05], 
                      frequency_list=['Low Frequency', 'Medium Frequency', 'High Frequency'], 
                      tall_thin=True, low_thin=True, even_thin=True):
  tree_df = convert_fmt(path)
  DOM = {}
  if null_thin:
    DOM['null'] = managements_highD(tree_df, 2021, interval=5, observation=observation, rate=rate, thin=False, del_poor=True)['Dom']
  for i in range(len(threshold_list)):
    threshold = threshold_list[i]
    DOM[f'highD_threshold{threshold}'] = managements_highD(tree_df, 2021, interval=5, observation=observation, rate=rate, thin=True, threshold=threshold, del_poor=True)['Dom']
  if tall_thin:
    DOM['tall'] = managements_tall(tree_df, 2021, interval=5, observation=observation, rate=rate, threshold=0.2, del_poor=True)['Dom']
  if low_thin:
    DOM['low'] = managements_low(tree_df, 2021, interval=5, observation=observation, rate=rate, threshold=0.2, del_poor=True)['Dom']
  if even_thin:
    DOM['even'] = managements_even(tree_df, 2021, interval=5, observation=observation, rate=rate, threshold=0.2, del_poor=True, even_thin=True)['Dom']
  return DOM

def compute_Dominance_mul(path, turn=1, observation=20, null_thin=True, threshold_list=[0.2, 0.1, 0.05], 
                      frequency_list=['Low Frequency', 'Medium Frequency', 'High Frequency'], 
                      tall_thin=True, low_thin=True, even_thin=True):
  rate_step=1/turn
  DOM_mul = {}
  for i in range(turn+1):
    rate = rate_step*i
    DOM = compute_Dominance_single(path, rate, observation, null_thin, threshold_list, frequency_list, tall_thin, low_thin, even_thin)
    DOM_mul[f'turn{i}DOM'] = DOM
  return DOM_mul

def plot_Dominance_single(title, DOM, rate=0.2, observation=20, null_thin=True, threshold_list=[0.2, 0.1, 0.05], 
                      frequency_list=['Low Frequency', 'Medium Frequency', 'High Frequency'], 
                      tall_thin=True, low_thin=True, even_thin=True):
  fig, axs = plt.subplots(1, 7, figsize=(56,8))
  plt.setp(axs, xticks=[i for i in range(observation+1)], xticklabels=[str(2021+i*5) for i in range(observation+1)])
  plt.suptitle(f'Thinning Rate: {rate}\n(Data Source: {title})')
  fig.autofmt_xdate(rotation=90)

  # Null thinning treatment.
  axs[0].plot(range(1, observation+1), DOM['null'], '-ok', label='Growth Dominance')
  axs[0].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance')
  axs[0].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance')
  axs[0].set_title('Null Thinning Treatment (Thinning Threshold: Null)\nNo Human Intervention')
  axs[0].set_xlabel('Year of Thinning (y)')
  axs[0].set_ylabel('Growth Dominance (range: -1~1)')
  axs[0].legend(loc='best')

  # HighD thinning treatment.
  for j in range(1, 4):
    threshold = threshold_list[j-1]
    frequency = frequency_list[j-1]
    axs[j].plot(range(1, observation+1), DOM[f'highD_threshold{threshold}'], '-ok', label='Growth Dominance')
    axs[j].plot(range(1, observation+1), -np.ones(observation)*threshold, '-', label='Thinning Threshold')
    axs[j].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance')
    axs[j].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance')
    axs[j].set_title(f'{frequency} Thinning Treatment (Thinning Threshold: {threshold})\nAdopt Tall Thinning when Dominance<Threshold')
    axs[j].set_xlabel('Year of Thinning (y)')
    axs[j].set_ylabel('Growth Dominance (range: -1~1)')
    axs[j].legend(loc='best')

  # Tall thinning treatment:
  axs[4].plot(range(1, observation+1), DOM['tall'], '-ok', label='Growth Dominance')
  axs[4].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance')
  axs[4].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance')
  axs[4].set_title('Tall Thinning Treatment (Thinning Threshold: Null)\nThin Larger Trees')
  axs[4].set_xlabel('Year of Thinning (y)')
  axs[4].set_ylabel('Growth Dominance (range: -1~1)')
  axs[4].legend(loc='best')

  # Low thinning treatment:
  axs[5].plot(range(1, observation+1), DOM['low'], '-ok', label='Growth Dominance')
  axs[5].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance')
  axs[5].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance')
  axs[5].set_title('Low Thinning Treatment (Thinning Threshold: Null)\nThin Smaller Trees')
  axs[5].set_xlabel('Year of Thinning (y)')
  axs[5].set_ylabel('Growth Dominance (range: -1~1)')
  axs[5].legend(loc='best')

  # Even thinning treatment:
  axs[6].plot(range(1, observation+1), DOM['even'], '-ok', label='Growth Dominance')
  axs[6].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance')
  axs[6].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance')
  axs[6].set_title('Even Thinning Treatment (Thinning Threshold: Null)\nThin both Larger and Smaller Trees')
  axs[6].set_xlabel('Year of Thinning (y)')
  axs[6].set_ylabel('Growth Dominance (range: -1~1)')
  axs[6].legend(loc='best')

  current_time = datetime.now()
  current_time_fmt = f'{current_time:%Y%m%d%H%M%S}'
  fig.savefig(f'{title}_Thinning_rate{rate}_{current_time_fmt}.pdf', dpi=600)
  files.download(f'{title}_Thinning_rate{rate}_{current_time_fmt}.pdf')

def plot_Dominance_mul(title, DOM_mul, turn=1, observation=20, null_thin=True, threshold_list=[0.2, 0.1, 0.05], 
                      frequency_list=['Low Frequency', 'Medium Frequency', 'High Frequency'], 
                      tall_thin=True, low_thin=True, even_thin=True):
  
  rate_step = 1/turn

  cols = [f'Thinning Rate: {round(rate_step*i, 2)}' for i in range(turn+1)]
  rows = (['Null Thinning Treatment\nThinning Threshold: Null'] + 
          [f'{frequency_list[i]} Thinning Treatment\n(Thinning Threshold: {threshold_list[i]})' for i in range(3)] +
          ['Tall Thinning Treatment\n(Thinning Threshold: 0)'] +
          ['Low Thinning Treatment\n(Thinning Threshold: 0)'] +
          ['Even Thinning Treatment\n(Thinning Threshold: 0)'])

  fig, axs = plt.subplots(7, turn+1, figsize=(100,50), sharex=True, sharey=True, constrained_layout=True)
  plt.setp(axs, xticks=[i for i in range(observation+1)], xticklabels=[str(2021+i*5) for i in range(observation+1)])
  plt.suptitle(f'Thinning Treatment Charts\n(Data Source: {title})', fontsize=24)
  fig.autofmt_xdate(rotation=90)
  for ax, col in zip(axs[0], cols):
    ax.set_title(col)

  for i in range(turn+1):
    rate = round(rate_step*i, 2)
    DOM = DOM_mul[f'turn{i}DOM']

    # Null thinning treatment.
    axs[0, i].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance', alpha=.5)
    axs[0, i].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance', alpha=.5)
    axs[0, i].plot(range(1, observation+1), DOM['null'], '-ok', label='Growth Dominance\n(Range: -1~1)')
    axs[0, i].spines['right'].set_visible(False)    
    axs[0, i].spines['top'].set_visible(False)
    axs[0, i].spines['left'].set_alpha(0.5)    
    axs[0, i].spines['bottom'].set_alpha(0.5)    
    #axs[0, i].set_title('Null Thinning Treatment (Thinning Threshold: Null)\nNo Human Intervention')
    if i==0:
    #axs[0, i].set_xlabel('Year of Thinning (y)')
      axs[0, i].set_ylabel(rows[0])
    #axs[0, i].legend(loc='lower right')

    # HighD thinning treatment.
    for j in range(1, 4):
      threshold = threshold_list[j-1]
      frequency = frequency_list[j-1]
      axs[j, i].plot(range(1, observation+1), -np.ones(observation)*threshold, '-', label='Thinning Threshold', alpha=.5)
      axs[j, i].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance', alpha=.5)
      axs[j, i].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance', alpha=.5)
      axs[j, i].plot(range(1, observation+1), DOM[f'highD_threshold{threshold}'], '-ok', label='Growth Dominance\n(Range: -1~1)')
      axs[j, i].spines['right'].set_visible(False)    
      axs[j, i].spines['top'].set_visible(False)
      axs[j, i].spines['left'].set_alpha(0.5)    
      axs[j, i].spines['bottom'].set_alpha(0.5)          
      #axs[j, i].set_title(f'{frequency} Thinning Treatment (Thinning Threshold: {threshold})\nAdopt Tall Thinning when Dominance<Threshold')
      #axs[j, i].set_xlabel('Year of Thinning (y)')
      if i==0:
        axs[j, i].set_ylabel(rows[j])
      #axs[j, i].legend(loc='lower right')

    # Tall thinning treatment:
    axs[4, i].plot(range(1, observation+1), np.zeros(observation), '-', label='Thinning Threshold', alpha=.5)
    axs[4, i].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance', alpha=.5)
    axs[4, i].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance', alpha=.5)
    axs[4, i].plot(range(1, observation+1), DOM['tall'], '-ok', label='Growth Dominance\n(Range: -1~1)')
    axs[4, i].spines['right'].set_visible(False)    
    axs[4, i].spines['top'].set_visible(False)
    axs[4, i].spines['left'].set_alpha(0.5)    
    axs[4, i].spines['bottom'].set_alpha(0.5)    
    if i==0:
      axs[4, i].set_ylabel(rows[4])

    # Even thinning treatment:
    axs[5, i].plot(range(1, observation+1), np.zeros(observation), '-', label='Thinning Threshold', alpha=.5)
    axs[5, i].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance', alpha=.5)
    axs[5, i].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance', alpha=.5)
    axs[5, i].plot(range(1, observation+1), DOM['even'], '-ok', label='Growth Dominance\n(Range: -1~1)')
    axs[5, i].spines['right'].set_visible(False)    
    axs[5, i].spines['top'].set_visible(False)
    axs[5, i].spines['left'].set_alpha(0.5)    
    axs[5, i].spines['bottom'].set_alpha(0.5)    
    axs[5, i].set_xlabel('Year of Thinning (y)')
    if i==0:
      axs[5, i].set_ylabel(rows[5])
    
    # Low thinning treatment:
    axs[6, i].plot(range(1, observation+1), np.zeros(observation), '-', label='Thinning Threshold', alpha=.5)
    axs[6, i].plot(range(1, observation+1), np.zeros(observation), '--r', label='Null Growth Dominance', alpha=.5)
    axs[6, i].plot(range(1, observation+1), -np.ones(observation), '-k', label='Minimum Dominance', alpha=.5)
    axs[6, i].plot(range(1, observation+1), DOM['low'], '-ok', label='Growth Dominance\n(Range: -1~1)')
    axs[6, i].spines['right'].set_visible(False)    
    axs[6, i].spines['top'].set_visible(False)
    axs[6, i].spines['left'].set_alpha(0.5)    
    axs[6, i].spines['bottom'].set_alpha(0.5)    
    if i==0:
      axs[6, i].set_ylabel(rows[6])
    if i==turn:
      axs[6, i].legend(loc='center right')

  current_time = datetime.now()
  current_time_fmt = f'{current_time:%Y%m%d%H%M%S}'
  plt.savefig(f'{title}_{current_time_fmt}.pdf', dpi=600)
  files.download(f'{title}_{current_time_fmt}.pdf')

def plot_Dominance(path, rate=0.2, observation=20, turn=5, multiple=False):
  if multiple:
    plot_Dominance_mul(path, turn, observation)
  else:
    plot_Dominance_single(path, rate)

def add_ord_index(tree_df):
  tree_df['ord_index'] = tree_df.index.to_list()
  return tree_df

def sort_ord_index(Trees):
  Trees.sort_values('ord_index', inplace=True, ignore_index=True)
  return Trees

def plot_tree_volume_mul(tree_df, rate=0.4, threshold=0.1):
  tree_df['ord_index'] = tree_df.index.to_list()
  tree_df = managements_highD(tree_df, 2021, interval=5, observation=20, rate=rate, thin=True, threshold=threshold, del_poor=True, plot_process=False, print_Dom=False)['Trees']
  tree_df.sort_values('ord_index', inplace=True, ignore_index=True)

  fig, axs = plt.subplots(7,3, figsize=(15,30))
  for i in range(21):
    year = 2021 + 5*i
    tree = tree_df[f'Diameter{year}']
    tree_a = np.array(list(tree) + [0, 0, 0]).reshape(5, 6)
    tree_matrix = pd.DataFrame(tree_a)
    x=i%7
    y=i//7
    for j in range(6):
      for k in range(5):
        axs[x,y].scatter(j, k, s=tree_matrix.loc[k, j]*100, c='k', clip_on=False)
    axs[x,y].grid(True)
    axs[x,y].set_title(f'Year: {year}\nRound: {i}', loc='right')
    plt.setp(axs[x,y], xticks=range(6), xticklabels=range(1,7), yticks=range(5), yticklabels=range(1,6))
  plt.suptitle(f'Tree Matrix from 2021 to 2121\n(Thinning Rate: {rate}, Thinning Threshold: {threshold})')
  plt.subplots_adjust(hspace=0.3, wspace=0.3)
  plt.savefig(f'Trees_Matrix_r{rate}t{threshold}.pdf', dpi=600)
  files.download(f'Trees_Matrix_r{rate}t{threshold}.pdf')

def tree_trunk_grid(x_center, y_center, diameter, height):
  z_grid = np.linspace(0, height, 100)
  theta_grid = np.linspace(0, 2*np.pi, 100)
  z_grid, theta_grid = np.meshgrid(z_grid, theta_grid)
  x_grid = x_center + (diameter/2)*np.cos(theta_grid)
  y_grid = y_center + (diameter/2)*np.sin(theta_grid)
  return x_grid, y_grid, z_grid

def plot_tree_trunk_single(Trees, year):
  fig = plt.figure(figsize=(10, 10))
  ax = fig.add_subplot(111, projection='3d')
  ax.set_proj_type('ortho')
  ax.w_zaxis.line.set_lw(0.)
  ax.set_zticks([])
  ax.xaxis.pane.fill = False
  ax.yaxis.pane.fill = False
  ax.zaxis.pane.fill = True
  ax.xaxis.pane.set_edgecolor('w')
  ax.yaxis.pane.set_edgecolor('w')
  ax.zaxis.pane.set_edgecolor('w')
  ax.xaxis._axinfo["grid"]['color'] =  (1,1,1,0)
  ax.yaxis._axinfo["grid"]['color'] =  (1,1,1,0)
  ax.zaxis._axinfo["grid"]['color'] =  (1,1,1,0)
  plt.setp(ax, xticks=range(7), xticklabels=range(7), yticks=range(6), yticklabels=range(6))

  tree = Trees[f'Diameter{year}']
  tree_a = np.array(list(tree) + [0, 0, 0]).reshape(5, 6)

  for x in range(6):
    for y in range(5):
      diameter = tree_a[y, x]/20
      height = diameter*10
      x_grid, y_grid, z_grid = tree_trunk_grid(x+1, y+1, diameter, height)
      ax.plot_surface(x_grid, y_grid, z_grid, color='k', alpha=0.6)
  ax.grid(visible=False)
  plt.savefig(f'TreeTrunk_{year}.pdf', dpi=600)
  files.download(f'TreeTrunk_{year}.pdf')

def plot_tree_trunk_mul_complex(Trees):
  ax_index_list = [1, 4, 7, 10, 13, 16, 19, 2, 5, 8, 11, 14, 17, 20, 3, 6, 9, 12, 15, 18, 21]
  
  fig = plt.figure(figsize=(15, 30))

  for i in range(21):
    year = 2021+5*i
    tree = Trees[f'Diameter{year}']
    tree_a = np.array(list(tree) + [0, 0, 0]).reshape(5, 6)
    
    ax = fig.add_subplot(7, 3, ax_index_list[i], projection='3d')
    ax.set_proj_type('ortho')
    ax.w_zaxis.line.set_lw(0.)
    ax.set_zticks([])
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = True
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')
    ax.xaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    ax.yaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    ax.zaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    plt.setp(ax, xticks=range(7), xticklabels=range(7), yticks=range(6), yticklabels=range(6))

    for x in range(6):
      for y in range(5):
        diameter = tree_a[y, x]/20
        height = diameter*10
        x_grid, y_grid, z_grid = tree_trunk_grid(x+1, y+1, diameter, height)
        ax.plot_surface(x_grid, y_grid, z_grid, color='k', alpha=0.6)
  plt.savefig(f'TreeTrunks.jpg', dpi=600)
  files.download(f'TreeTrunks.jpg')

def tree_df_to_meshgrid(Trees):
  index = [f'{i*5+2021}' for i in range(21)]
  columns = []
  for i in range(6):
    for j in range(5):
      columns.append((j,i))
  meshgrid_allyear = {}
  for i in range(21):
    tree = Trees[f'Diameter{index[i]}']
    tree_a = np.array(list(tree) + [0, 0, 0]).reshape(5, 6)
    meshgrid_dict = {}
    for x in range(6):
      for y in range(5):
        diameter = tree_a[y, x]/30
        height = diameter*10
        x_grid, y_grid, z_grid = tree_trunk_grid(x+1, y+1, diameter, height)
        meshgrid = {
            'x_grid': x_grid,
            'y_grid': y_grid,
            'z_grid': z_grid
        }
        meshgrid_dict[f'({y},{x})'] = meshgrid
    meshgrid_allyear[index[i]] = meshgrid_dict
  return meshgrid_allyear

def plot_tree_trunk_mul_simple(tree_meshgrid, rate, threshold):
  ax_index_list = [1, 4, 7, 10, 13, 16, 19, 2, 5, 8, 11, 14, 17, 20, 3, 6, 9, 12, 15, 18, 21]
  
  plt.ioff()
  fig = plt.figure(figsize=(15, 30))

  for i in range(21):
    year = 2021+5*i
    tree = Trees[f'Diameter{year}']
    tree_a = np.array(list(tree) + [0, 0, 0]).reshape(5, 6)
    
    ax = fig.add_subplot(7, 3, ax_index_list[i], projection='3d')
    ax.set_proj_type('ortho')
    ax.w_zaxis.line.set_lw(0.)
    ax.set_zticks([])
    ax.xaxis.pane.fill = False
    ax.yaxis.pane.fill = False
    ax.zaxis.pane.fill = True
    ax.xaxis.pane.set_edgecolor('w')
    ax.yaxis.pane.set_edgecolor('w')
    ax.zaxis.pane.set_edgecolor('w')
    ax.xaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    ax.yaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    ax.zaxis._axinfo["grid"]['color'] =  (1,1,1,0)
    plt.setp(ax, xticks=range(7), xticklabels=range(7), yticks=range(6), yticklabels=range(6))
    ax.set_title(f'Year: {year}\nRound: {i}', loc='right')

    for x in range(6):
      for y in range(5):
        x_grid = tree_meshgrid[f'{year}'][f'({y},{x})']['x_grid']
        y_grid = tree_meshgrid[f'{year}'][f'({y},{x})']['y_grid']
        z_grid = tree_meshgrid[f'{year}'][f'({y},{x})']['z_grid']
        ax.plot_surface(x_grid, y_grid, z_grid, color='k', alpha=0.6)
  plt.suptitle(f'Tree Trunks from 2021 to 2121\n(Thinning Rate: {rate}, Thinning Threshold: {threshold})')
  plt.subplots_adjust(hspace=0.3, wspace=0.3)
  plt.savefig(f'TreeTrunks_r{rate}t{threshold}.jpg', dpi=150)
  files.download(f'TreeTrunks_r{rate}t{threshold}.jpg')
  plt.close(fig)

def default_strategy():
  return [
          {'rate': 0.8, 'threshold': 0.05},
          {'rate': 0.7, 'threshold': 0.2},
          {'rate': 0.4, 'threshold': 0.1},
          {'rate': 0.1, 'threshold': 0.05},
          {'rate': 0, 'threshold': 0.2},
          {'rate': 1, 'threshold': 0.2}
  ]

def plot_tree_trunks(tree_df):
  for strategy in default_strategy():
    rate = strategy['rate']
    threshold = strategy['threshold']
    tree_df = delete_poor(tree_df)
    tree_df = add_ord_index(tree_df)
    Trees = managements_highD(tree_df, 2021, interval=5, observation=20, rate=rate, thin=True, threshold=threshold, del_poor=True, plot_process=False, print_Dom=False)['Trees']
    Trees = sort_ord_index(Trees)
    tree_meshgrid = tree_df_to_meshgrid(Trees)
    plot_tree_trunk_mul_simple(tree_meshgrid, rate=rate, threshold=threshold)

plot_tree_trunks(tree_df)

"""rate = 0
threshold = 0.2
tree_df = pd.read_excel('/content/Parcel 6 Plot 4_Clean_sm.xlsx')
tree_df = delete_poor(tree_df)
tree_df = add_ord_index(tree_df)
Trees = managements_highD(tree_df, 2021, interval=5, observation=20, rate=rate, thin=True, threshold=threshold, del_poor=True, plot_process=False, print_Dom=False)['Trees']
Trees = add_ord_index(Trees)
tree_meshgrid = tree_df_to_meshgrid(Trees)
plot_tree_trunk_mul_simple(tree_meshgrid, rate, threshold)"""

tree_df = pd.read_excel('/content/Parcel 6 Plot 4_Clean_sm.xlsx')
tree_df

tree_df
tree_df.index = range(len(tree_df))
tree_df['coordinate'] = [(i%6+1, i//6+1) for i in tree_df.index.to_list()]
tree2 = pd.DataFrame(index = list(range(1, 6)), columns = list(range(1,7)))
tree_df

tree_df = delete_poor(tree_df)
tree_df = add_ord_index(tree_df)
Trees = managements_highD(tree_df, 2021, interval=5, observation=20, rate=1, threshold=0.2)['Trees']
Trees = sort_ord_index(Trees)
tree_meshgrid = tree_df_to_meshgrid(Trees)
tree_meshgrid['2046']

Trees

plot_tree_trunk_mul_simple(tree_meshgrid, 1, 0.2)

